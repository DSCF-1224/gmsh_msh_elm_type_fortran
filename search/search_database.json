var tipuesearch = {"pages":[{"title":" DSCF-1224/gmsh_msh_elm_type_fortran ","text":"DSCF-1224/gmsh_msh_elm_type_fortran gmsh_msh_elm_type_fortran API Documentation License Other references Warning This API documentation for gmsh_msh_elm_type_fortran is a work in progress. gmsh_msh_elm_type_fortran API Documentation This is the main API documentation landing page generated by FORD . License The gmsh_msh_elm_type_fortran source code and related files and documentation are distributed under the MIT license . Other references stdlib/API-doc-FORD-file.md at master · fortran-lang/stdlib I used this file as the original.","tags":"home","url":"index.html"},{"title":"gmsh_msh_elm_type – DSCF-1224/gmsh_msh_elm_type_fortran ","text":"type, public :: gmsh_msh_elm_type Derived type to hold elm-type of Gmsh MSH file format. Components Type Visibility Attributes Name Initial integer(kind=c_int), private :: expression","tags":"","url":"type/gmsh_msh_elm_type.html"},{"title":"export_expression – DSCF-1224/gmsh_msh_elm_type_fortran","text":"private elemental function export_expression(elm_type) result(expression) Export the elm-type as an integer. Arguments Type Intent Optional Attributes Name type( gmsh_msh_elm_type ), intent(in) :: elm_type Return Value integer Called by proc~~export_expression~~CalledByGraph proc~export_expression export_expression interface~export export interface~export->proc~export_expression Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function export_expression ( elm_type ) result ( expression ) type ( gmsh_msh_elm_type ), intent ( in ) :: elm_type integer :: expression expression = elm_type % expression end function export_expression","tags":"","url":"proc/export_expression.html"},{"title":"is_equal – DSCF-1224/gmsh_msh_elm_type_fortran","text":"private elemental function is_equal(type1, type2) Compares two elm-type for equality. Arguments Type Intent Optional Attributes Name type( gmsh_msh_elm_type ), intent(in) :: type1 type( gmsh_msh_elm_type ), intent(in) :: type2 Return Value logical Called by proc~~is_equal~~CalledByGraph proc~is_equal is_equal interface~operator(.eq.) operator(.eq.) interface~operator(.eq.)->proc~is_equal Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function is_equal ( type1 , type2 ) type ( gmsh_msh_elm_type ), intent ( in ) :: type1 , type2 logical :: is_equal is_equal = type1 % expression . eq . type2 % expression end function is_equal","tags":"","url":"proc/is_equal.html"},{"title":"initialize_gmsh_msh_elm_type – DSCF-1224/gmsh_msh_elm_type_fortran","text":"private elemental subroutine initialize_gmsh_msh_elm_type(elm_type) Initialize the expression to hold the elm-type . Arguments Type Intent Optional Attributes Name type( gmsh_msh_elm_type ), intent(out) :: elm_type Called by proc~~initialize_gmsh_msh_elm_type~~CalledByGraph proc~initialize_gmsh_msh_elm_type initialize_gmsh_msh_elm_type interface~initialize initialize interface~initialize->proc~initialize_gmsh_msh_elm_type Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental subroutine initialize_gmsh_msh_elm_type ( elm_type ) type ( gmsh_msh_elm_type ), intent ( out ) :: elm_type elm_type % expression = 0 end subroutine initialize_gmsh_msh_elm_type","tags":"","url":"proc/initialize_gmsh_msh_elm_type.html"},{"title":"read_ascii_file_for_gmsh_msh_elm_type – DSCF-1224/gmsh_msh_elm_type_fortran","text":"private  subroutine read_ascii_file_for_gmsh_msh_elm_type(elm_type, unit, iostat, iomsg) Read an elm-type from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_elm_type ), intent(inout) :: elm_type integer, intent(in) :: unit integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Called by proc~~read_ascii_file_for_gmsh_msh_elm_type~~CalledByGraph proc~read_ascii_file_for_gmsh_msh_elm_type read_ascii_file_for_gmsh_msh_elm_type interface~read_ascii_file read_ascii_file interface~read_ascii_file->proc~read_ascii_file_for_gmsh_msh_elm_type proc~read_formatted read_formatted proc~read_formatted->interface~read_ascii_file interface~read(formatted) read(formatted) interface~read(formatted)->proc~read_formatted Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code subroutine read_ascii_file_for_gmsh_msh_elm_type ( elm_type , unit , iostat , iomsg ) class ( gmsh_msh_elm_type ), intent ( inout ) :: elm_type integer , intent ( in ) :: unit integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg read ( & ! unit = unit , & ! fmt = * , & ! iostat = iostat , & ! iomsg = iomsg (:) & ! ) & ! elm_type % expression end subroutine read_ascii_file_for_gmsh_msh_elm_type","tags":"","url":"proc/read_ascii_file_for_gmsh_msh_elm_type.html"},{"title":"read_formatted – DSCF-1224/gmsh_msh_elm_type_fortran","text":"private  subroutine read_formatted(elm_type, unit, iotype, v_list, iostat, iomsg) Read an elm-type from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_elm_type ), intent(inout) :: elm_type integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Calls proc~~read_formatted~~CallsGraph proc~read_formatted read_formatted interface~read_ascii_file read_ascii_file proc~read_formatted->interface~read_ascii_file proc~read_ascii_file_for_gmsh_msh_elm_type read_ascii_file_for_gmsh_msh_elm_type interface~read_ascii_file->proc~read_ascii_file_for_gmsh_msh_elm_type Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_formatted~~CalledByGraph proc~read_formatted read_formatted interface~read(formatted) read(formatted) interface~read(formatted)->proc~read_formatted Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code subroutine read_formatted ( elm_type , unit , iotype , v_list , iostat , iomsg ) class ( gmsh_msh_elm_type ), intent ( inout ) :: elm_type integer , intent ( in ) :: unit character ( * ), intent ( in ) :: iotype integer , intent ( in ) :: v_list (:) integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg iomsg = '' if ( size ( v_list (:) ) . gt . 0 ) then error stop \"gmsh_msh_elm_type does NOT support v_list formatters.\" end if select case ( iotype ) case ( \"LISTDIRECTED\" ) call read_ascii_file ( & ! elm_type = elm_type , & ! unit = unit , & ! iostat = iostat , & ! iomsg = iomsg & ! ) case default error stop \"gmsh_msh_elm_type only supports the `LISTDIRECTED` iotype.\" end select end subroutine read_formatted","tags":"","url":"proc/read_formatted.html"},{"title":"export – DSCF-1224/gmsh_msh_elm_type_fortran","text":"public interface export Export the elm-type as an integer. Calls interface~~export~~CallsGraph interface~export export proc~export_expression export_expression interface~export->proc~export_expression Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function export_expression (elm_type) result(expression) License MIT Version experimental Export the elm-type as an integer. Arguments Type Intent Optional Attributes Name type( gmsh_msh_elm_type ), intent(in) :: elm_type Return Value integer","tags":"","url":"interface/export.html"},{"title":"initialize – DSCF-1224/gmsh_msh_elm_type_fortran","text":"public interface initialize Initialize the expression to hold the elm-type . Calls interface~~initialize~~CallsGraph interface~initialize initialize proc~initialize_gmsh_msh_elm_type initialize_gmsh_msh_elm_type interface~initialize->proc~initialize_gmsh_msh_elm_type Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental subroutine initialize_gmsh_msh_elm_type (elm_type) License MIT Version experimental Initialize the expression to hold the elm-type . Arguments Type Intent Optional Attributes Name type( gmsh_msh_elm_type ), intent(out) :: elm_type","tags":"","url":"interface/initialize.html"},{"title":"operator(.eq.) – DSCF-1224/gmsh_msh_elm_type_fortran","text":"public interface operator(.eq.) Compares two elm-type for equality. Calls interface~~operator(.eq.)~~CallsGraph interface~operator(.eq.) operator(.eq.) proc~is_equal is_equal interface~operator(.eq.)->proc~is_equal Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function is_equal (type1, type2) License MIT Version experimental Compares two elm-type for equality. Arguments Type Intent Optional Attributes Name type( gmsh_msh_elm_type ), intent(in) :: type1 type( gmsh_msh_elm_type ), intent(in) :: type2 Return Value logical","tags":"","url":"interface/operator(.eq.).html"},{"title":"read(formatted) – DSCF-1224/gmsh_msh_elm_type_fortran","text":"public interface read(formatted) Read an elm-type from a connected formatted unit. Calls interface~~read(formatted)~~CallsGraph interface~read(formatted) read(formatted) proc~read_formatted read_formatted interface~read(formatted)->proc~read_formatted interface~read_ascii_file read_ascii_file proc~read_formatted->interface~read_ascii_file proc~read_ascii_file_for_gmsh_msh_elm_type read_ascii_file_for_gmsh_msh_elm_type interface~read_ascii_file->proc~read_ascii_file_for_gmsh_msh_elm_type Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private  subroutine read_formatted (elm_type, unit, iotype, v_list, iostat, iomsg) License MIT Version experimental Read an elm-type from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_elm_type ), intent(inout) :: elm_type integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","url":"interface/read(formatted).html"},{"title":"read_ascii_file – DSCF-1224/gmsh_msh_elm_type_fortran","text":"public interface read_ascii_file Read an elm-type from a connected formatted unit. Calls interface~~read_ascii_file~~CallsGraph interface~read_ascii_file read_ascii_file proc~read_ascii_file_for_gmsh_msh_elm_type read_ascii_file_for_gmsh_msh_elm_type interface~read_ascii_file->proc~read_ascii_file_for_gmsh_msh_elm_type Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by interface~~read_ascii_file~~CalledByGraph interface~read_ascii_file read_ascii_file proc~read_formatted read_formatted proc~read_formatted->interface~read_ascii_file interface~read(formatted) read(formatted) interface~read(formatted)->proc~read_formatted Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private  subroutine read_ascii_file_for_gmsh_msh_elm_type (elm_type, unit, iostat, iomsg) License MIT Version experimental Read an elm-type from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_elm_type ), intent(inout) :: elm_type integer, intent(in) :: unit integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","url":"interface/read_ascii_file.html"},{"title":"gmsh_msh_elm_type_fortran – DSCF-1224/gmsh_msh_elm_type_fortran","text":"Implementation of a derived type to hold elm-type of Gmsh MSH file format Uses iso_c_binding module~~gmsh_msh_elm_type_fortran~~UsesGraph module~gmsh_msh_elm_type_fortran gmsh_msh_elm_type_fortran iso_c_binding iso_c_binding module~gmsh_msh_elm_type_fortran->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Interfaces public        interface export Export the elm-type as an integer. private elemental function export_expression (elm_type) result(expression) License MIT Version experimental Export the elm-type as an integer. Arguments Type Intent Optional Attributes Name type( gmsh_msh_elm_type ), intent(in) :: elm_type Return Value integer public        interface initialize Initialize the expression to hold the elm-type . private elemental subroutine initialize_gmsh_msh_elm_type (elm_type) License MIT Version experimental Initialize the expression to hold the elm-type . Arguments Type Intent Optional Attributes Name type( gmsh_msh_elm_type ), intent(out) :: elm_type public        interface operator(.eq.) Compares two elm-type for equality. private elemental function is_equal (type1, type2) License MIT Version experimental Compares two elm-type for equality. Arguments Type Intent Optional Attributes Name type( gmsh_msh_elm_type ), intent(in) :: type1 type( gmsh_msh_elm_type ), intent(in) :: type2 Return Value logical public        interface read(formatted) Read an elm-type from a connected formatted unit. private  subroutine read_formatted (elm_type, unit, iotype, v_list, iostat, iomsg) License MIT Version experimental Read an elm-type from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_elm_type ), intent(inout) :: elm_type integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg public        interface read_ascii_file Read an elm-type from a connected formatted unit. private  subroutine read_ascii_file_for_gmsh_msh_elm_type (elm_type, unit, iostat, iomsg) License MIT Version experimental Read an elm-type from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_elm_type ), intent(inout) :: elm_type integer, intent(in) :: unit integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Derived Types type, public :: gmsh_msh_elm_type Derived type to hold elm-type of Gmsh MSH file format. Components Type Visibility Attributes Name Initial integer(kind=c_int), private :: expression Functions private elemental function export_expression (elm_type) result(expression) License MIT Version experimental Export the elm-type as an integer. Arguments Type Intent Optional Attributes Name type( gmsh_msh_elm_type ), intent(in) :: elm_type Return Value integer private elemental function is_equal (type1, type2) License MIT Version experimental Compares two elm-type for equality. Arguments Type Intent Optional Attributes Name type( gmsh_msh_elm_type ), intent(in) :: type1 type( gmsh_msh_elm_type ), intent(in) :: type2 Return Value logical Subroutines private elemental subroutine initialize_gmsh_msh_elm_type (elm_type) License MIT Version experimental Initialize the expression to hold the elm-type . Arguments Type Intent Optional Attributes Name type( gmsh_msh_elm_type ), intent(out) :: elm_type private  subroutine read_ascii_file_for_gmsh_msh_elm_type (elm_type, unit, iostat, iomsg) License MIT Version experimental Read an elm-type from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_elm_type ), intent(inout) :: elm_type integer, intent(in) :: unit integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg private  subroutine read_formatted (elm_type, unit, iotype, v_list, iostat, iomsg) License MIT Version experimental Read an elm-type from a connected formatted unit. Arguments Type Intent Optional Attributes Name class( gmsh_msh_elm_type ), intent(inout) :: elm_type integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","url":"module/gmsh_msh_elm_type_fortran.html"},{"title":"gmsh_msh_elm_type_fortran.f90 – DSCF-1224/gmsh_msh_elm_type_fortran","text":"Source Code !> Implementation of a derived type to hold `elm-type` of Gmsh MSH file format module gmsh_msh_elm_type_fortran use , intrinsic :: iso_c_binding , only : c_int implicit none private public :: gmsh_msh_elm_type public :: operator (. eq .) public :: read ( formatted ) public :: export public :: initialize public :: read_ascii_file !> Version: experimental !> Derived type to hold `elm-type` of Gmsh MSH file format. type :: gmsh_msh_elm_type integer ( c_int ), private :: expression end type !> Version: experimental !> Compares two `elm-type` for equality. interface operator (. eq .) module procedure :: is_equal end interface operator (. eq .) !> Version: experimental !> Read an `elm-type` from a connected formatted unit. interface read ( formatted ) module procedure :: read_formatted end interface !> Version: experimental !> Export the `elm-type` as an integer. interface export module procedure :: export_expression end interface export !> Version: experimental !> Initialize the expression to hold the `elm-type`. interface initialize module procedure :: initialize_gmsh_msh_elm_type end interface initialize !> Version: experimental !> Read an `elm-type` from a connected formatted unit. interface read_ascii_file module procedure :: read_ascii_file_for_gmsh_msh_elm_type end interface read_ascii_file contains !> Version: experimental !> Export the `elm-type` as an integer. elemental function export_expression ( elm_type ) result ( expression ) type ( gmsh_msh_elm_type ), intent ( in ) :: elm_type integer :: expression expression = elm_type % expression end function export_expression !> Version: experimental !> Compares two `elm-type` for equality. elemental function is_equal ( type1 , type2 ) type ( gmsh_msh_elm_type ), intent ( in ) :: type1 , type2 logical :: is_equal is_equal = type1 % expression . eq . type2 % expression end function is_equal !> Version: experimental !> Read an `elm-type` from a connected formatted unit. subroutine read_ascii_file_for_gmsh_msh_elm_type ( elm_type , unit , iostat , iomsg ) class ( gmsh_msh_elm_type ), intent ( inout ) :: elm_type integer , intent ( in ) :: unit integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg read ( & ! unit = unit , & ! fmt = * , & ! iostat = iostat , & ! iomsg = iomsg (:) & ! ) & ! elm_type % expression end subroutine read_ascii_file_for_gmsh_msh_elm_type !> Version: experimental !> Read an `elm-type` from a connected formatted unit. subroutine read_formatted ( elm_type , unit , iotype , v_list , iostat , iomsg ) class ( gmsh_msh_elm_type ), intent ( inout ) :: elm_type integer , intent ( in ) :: unit character ( * ), intent ( in ) :: iotype integer , intent ( in ) :: v_list (:) integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg iomsg = '' if ( size ( v_list (:) ) . gt . 0 ) then error stop \"gmsh_msh_elm_type does NOT support v_list formatters.\" end if select case ( iotype ) case ( \"LISTDIRECTED\" ) call read_ascii_file ( & ! elm_type = elm_type , & ! unit = unit , & ! iostat = iostat , & ! iomsg = iomsg & ! ) case default error stop \"gmsh_msh_elm_type only supports the `LISTDIRECTED` iotype.\" end select end subroutine read_formatted !> Version: experimental !> Initialize the expression to hold the `elm-type`. elemental subroutine initialize_gmsh_msh_elm_type ( elm_type ) type ( gmsh_msh_elm_type ), intent ( out ) :: elm_type elm_type % expression = 0 end subroutine initialize_gmsh_msh_elm_type end module gmsh_msh_elm_type_fortran","tags":"","url":"sourcefile/gmsh_msh_elm_type_fortran.f90.html"}]}